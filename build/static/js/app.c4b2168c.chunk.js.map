{"version":3,"sources":["apollo.ts","App.tsx","web-build/register-service-worker.js"],"names":["httpLink","HttpLink","uri","apolloClient","ApolloClient","cache","InMemoryCache","link","HELLO","gql","RootComponent","useQuery","data","loading","error","SafeAreaView","style","styles","loadingContainer","ActivityIndicator","View","container","Text","hello","StyleSheet","create","flex","justifyContent","alignItems","paddingHorizontal","profileContainer","flexDirection","image","height","width","borderRadius","details","marginLeft","name","fontSize","fontWeight","username","color","tweetContainer","marginTop","tweet","App","ApolloProvider","client","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","console"],"mappings":"uPAmBMA,EAAW,IAAIC,IAAS,CAC5BC,IAjBsB,mCAoBXC,EAAe,IAAIC,IAAa,CAC3CC,MAAO,IAAIC,IACXC,KAAMP,I,0FCbR,IAAMQ,EAAQC,YAAH,KAMX,SAASC,IAAiB,IAAD,EACUC,YAASH,GAAlCI,EADe,EACfA,KAAMC,EADS,EACTA,QADS,EACAC,MACvB,OAAID,EAEA,kBAACE,EAAA,EAAD,CAAcC,MAAOC,EAAOC,kBAC1B,kBAACC,EAAA,EAAD,OAKJ,kBAACC,EAAA,EAAD,CAAMJ,MAAOC,EAAOI,WAClB,kBAACC,EAAA,EAAD,cAAaV,GAAQA,EAAKW,QAKhC,IAAMN,EAASO,IAAWC,OAAO,CAC/BP,iBAAkB,CAChBQ,KAAM,EACNC,eAAgB,SAChBC,WAAY,UAEdP,UAAW,CACTK,KAAM,EACNC,eAAgB,SAChBE,kBAAmB,IAErBC,iBAAkB,CAChBC,cAAe,MACfH,WAAY,UAEdI,MAAO,CACLC,OAAQ,GACRC,MAAO,GACPC,aAAc,KAEhBC,QAAS,CACPC,WAAY,GAEdC,KAAM,CACJC,SAAU,GACVC,WAAY,QAEdC,SAAU,CACRC,MAAO,QAETC,eAAgB,CACdC,UAAW,IAEbC,MAAO,CACLN,SAAU,MAIC,SAASO,IACtB,OACE,kBAACC,EAAA,EAAD,CAAgBC,OAAQ7C,GACtB,kBAACO,EAAD,S,+DCzEF,kBAAmBuC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAAUC,OAGfC,OAAM,SAAU3C,GACf4C,QAAQF,KAAK,oCAAqC1C,W","file":"static/js/app.c4b2168c.chunk.js","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\r\n// import { setContext } from '@apollo/link-context';\r\n\r\nconst GRAPHQL_API_URL = 'https://localhost:8443/graphql';\r\n\r\n/*\r\nuncomment the code below in case you are using a GraphQL API that requires some form of\r\nauthentication. asyncAuthLink will run every time your request is made and use the token\r\nyou provide while making the request.\r\nconst TOKEN = '';\r\nconst asyncAuthLink = setContext(async () => {\r\n  return {\r\n    headers: {\r\n      Authorization: TOKEN,\r\n    },\r\n  };\r\n});\r\n*/\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: GRAPHQL_API_URL,\r\n});\r\n\r\nexport const apolloClient = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: httpLink,\r\n  // link: asyncAuthLink.concat(httpLink),\r\n});\r\n","import React from 'react';\r\nimport {\r\n  Text,\r\n  View,\r\n  SafeAreaView,\r\n  ActivityIndicator,\r\n  StyleSheet,\r\n} from 'react-native';\r\nimport { ApolloProvider, useQuery, gql } from '@apollo/client';\r\n\r\nimport { apolloClient } from './apollo';\r\n\r\nconst HELLO = gql`\r\n  query {\r\n    hello\r\n  }\r\n`;\r\n\r\nfunction RootComponent() {\r\n  const { data, loading, error } = useQuery(HELLO);\r\n  if (loading) {\r\n    return (\r\n      <SafeAreaView style={styles.loadingContainer}>\r\n        <ActivityIndicator />\r\n      </SafeAreaView>\r\n    );\r\n  }\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text>Data: {data && data.hello}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    paddingHorizontal: 50,\r\n  },\r\n  profileContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  image: {\r\n    height: 50,\r\n    width: 50,\r\n    borderRadius: 100,\r\n  },\r\n  details: {\r\n    marginLeft: 5,\r\n  },\r\n  name: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n  },\r\n  username: {\r\n    color: 'gray',\r\n  },\r\n  tweetContainer: {\r\n    marginTop: 10,\r\n  },\r\n  tweet: {\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default function App() {\r\n  return (\r\n    <ApolloProvider client={apolloClient}>\r\n      <RootComponent />\r\n    </ApolloProvider>\r\n  );\r\n}\r\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}